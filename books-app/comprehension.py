# Python 3 - List/Set/Dictionary Comprehension

# The concept of comprehensions allows us to build sequences from other sequences, in an easy, quick and elegant way. 

# Lets start working with list comprehensions, because they are, perhaps, the most widely used. 
# They are actually a quick alternative to something we've already seen and used this far. 

# Lets say we have a list and we want to iterate over it and perform some sort of action on each of its elements. 

# We would use a for loop, right? 
# Lets build a list of all elements in the range generated by range(10), having each element raised to the power of 2. 

# This is where the results are going to be appended 

list1 = [] 

# Now, its time to iterate over range(10), do math and append the result to list1 
for i in range(10): 
    result = i ** 2 
    list1.append(result) 

print(list1) 

# But what if we could write this whole code of block on a single line? 
# Python allows you to do this, using a list comprehension. 

# Lets see this in action 
list2 = [x ** 2 for x in range(10)] 

# So, we've created list2, then, in between square brackets - beacause we are trying to build a list - we first write the action to be performed on each element and then, on the same line, without any colons, commas, or indentation, we write the loop structure, as we would the old fashioned way 

# Pretty cool, I think! Now lets see the result, it should be the same as list1 
print(list2)

# But, what if you want to also add a conditional statement inside this looping construct? 
# Lets say you want only the numbers greater than 5 to be raised to the power of 2. 
# The solution i sto enter the 'if' statemetn right after the 'for' statement, at the end of the list comprehension. 
# Lets do this 
list3 = [x ** 2 for x in range(10) if x > 5] 

# So, as you can see, we have the for statement in the middle, on the left side, we have the action to be performed and on the right side we have the conditional statement. 
# Again no commas or colons are needed. Lets see the list now 
print(list3) 

# Now, lets see set and dictionary comprehensions 

# The way to build and write them is the same as for list comprehension, the only difference being the enclosing character for the comprehension. 

# For both set and dictionary comprehensions, we use the curly braces as enclosing characters, instead of square brackets 

# Lets better see an example for each of them starting with set comprhension. 

set1 = {x ** 2 for x in range(10)} 
print(set1)

# So, indeed we built a set using a set comprehension. Cool! Now lets do the same, for dictionaries
 
# Lets remember that dictionary elements are actually key-value pairs, where the key is separated from the value by a colon. So, this is the format we should use for dictionary comprehensions, as well 

dict1 = {x: x ** 2 for x in range(10)} 
print(dict1)

# I think that list, set, and dictionary comprehension can be a useful elegant way to write some code, especially when you want to perform simple 'for' loops and save some space within your program. So, keep them in mind.
# I can almost guarantee that you will need them at some point in your programming adventure. 

# Next -> we will create a lottery app 